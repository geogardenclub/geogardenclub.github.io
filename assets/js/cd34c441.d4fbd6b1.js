"use strict";(self.webpackChunkgeogardenclub_github_io=self.webpackChunkgeogardenclub_github_io||[]).push([[3481],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,c=p["".concat(s,".").concat(m)]||p[m]||h[m]||r;return n?i.createElement(c,l(l({ref:t},u),{},{components:n})):i.createElement(c,l({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9048:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=n(7462),a=(n(7294),n(3905));const r={hide_table_of_contents:!1},l="Test Design",o={unversionedId:"develop/release-1.0/design-components/test-design",id:"develop/release-1.0/design-components/test-design",title:"Test Design",description:'For the GeoGardenClub project, we are using JSON files to create the data for the application. The test files are located in one of (potentially many) directories named assets\\test\\fixtureN, when "N" is a number uniquely identifying the fixture. Currently, we only have one fixture directory.',source:"@site/docs/develop/release-1.0/design-components/test-design.md",sourceDirName:"develop/release-1.0/design-components",slug:"/develop/release-1.0/design-components/test-design",permalink:"/docs/develop/release-1.0/design-components/test-design",draft:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!1},sidebar:"developSidebar",previous:{title:"Data Mutation",permalink:"/docs/develop/release-1.0/design-components/data-mutation"},next:{title:"ChapterZipMap",permalink:"/docs/develop/release-2.0/chapterzipmap"}},s={},d=[{value:"Fixtures",id:"fixtures",level:2},{value:"Fixture Paths",id:"fixture-paths",level:2},{value:"AssetCollectionBuilder",id:"assetcollectionbuilder",level:2},{value:"TestFixture singleton",id:"testfixture-singleton",level:2},{value:"Unit Tests",id:"unit-tests",level:2},{value:"Running the unit tests",id:"running-the-unit-tests",level:2},{value:"Integration Tests",id:"integration-tests",level:2},{value:"Running the integration tests",id:"running-the-integration-tests",level:2},{value:"Helpers",id:"helpers",level:2}],u={toc:d},p="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"test-design"},"Test Design"),(0,a.kt)("p",null,"For the GeoGardenClub project, we are using JSON files to create the data for the application. The test files are located in one of (potentially many) directories named ",(0,a.kt)("inlineCode",{parentName:"p"},"assets\\test\\fixtureN"),', when "N" is a number uniquely identifying the fixture. Currently, we only have one fixture directory.'),(0,a.kt)("h2",{id:"fixtures"},"Fixtures"),(0,a.kt)("p",null,"Each fixture directory must contain the following files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"badgeData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"badgeInstanceData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bedData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"chapterData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cropData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"editorData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"familyData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gardenData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gardenerData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"observationData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"outcomeData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"plantingData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"roleData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"seedData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tagData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"taskData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"userData.json")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"varietyData.json"))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The JSON files need to have integrity, so their ids must align. Since many of the GGC IDs end with a four digit millis field we've assigned each type a unique millis field."),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"bedIDs end with 3456."),(0,a.kt)("li",{parentName:"ul"},"cropIDs end with 5678."),(0,a.kt)("li",{parentName:"ul"},"gardenIDs end with 7890."),(0,a.kt)("li",{parentName:"ul"},"observationIDs end with 4567."),(0,a.kt)("li",{parentName:"ul"},"outcomeIDs end with 2345."),(0,a.kt)("li",{parentName:"ul"},"plantingIDs end with 1234."),(0,a.kt)("li",{parentName:"ul"},"seedIDs end with 6789."),(0,a.kt)("li",{parentName:"ul"},"taskIDs end with 8901."),(0,a.kt)("li",{parentName:"ul"},"varietyIDs end with 9012."),(0,a.kt)("li",{parentName:"ul"},"badgeInstances end with 9876."))),(0,a.kt)("h2",{id:"fixture-paths"},"Fixture Paths"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"lib/features/fixture_paths.dart")," file defines two constants:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"testFixturePath")," - the path to the test fixture directory. This constant is used to load the test data in the tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"monarchFixturePath")," - the path to the Monarch fixture directory used by ",(0,a.kt)("inlineCode",{parentName:"li"},"WithMonarchData"),".")),(0,a.kt)("h2",{id:"assetcollectionbuilder"},"AssetCollectionBuilder"),(0,a.kt)("p",null,"To facilitate the loading of the fixture files, we have created the ",(0,a.kt)("inlineCode",{parentName:"p"},"AssetCollectionBuilder")," class. This class has three static methods to produce each of the collections from a fixture path. The three methods are as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Future<List<type>> getTypes(String assetPath)")," - loads the data from the fixture file and returns a list of the type."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Future<Stream<List<type>>> getTypesStream(String assetPath)")," - loads the data from the fixture file and returns a stream of a list of the type."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Future<TypeCollection> getTypeCollection(String assetPath)")," - loads the data from the fixture file and returns a collection of the type.")),(0,a.kt)("p",null,"For example, to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"BedCollection")," from the fixture path, use the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"final bedCollection = await AssetCollectionBuilder.getBedCollection(testFixturePath);\n")),(0,a.kt)("p",null,"In addition, the ",(0,a.kt)("inlineCode",{parentName:"p"},"AssetCollectionBuilder")," class has three build methods that build the collections with all the data like the ",(0,a.kt)("inlineCode",{parentName:"p"},"WithAllData")," classes. The methods are as follows"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"buildChapterCollection(String assetPath, String chapterId)")," - builds a ",(0,a.kt)("inlineCode",{parentName:"li"},"ChapterCollection"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"buildGardenCollection(String assetPath, String gardenId)")," - builds a ",(0,a.kt)("inlineCode",{parentName:"li"},"GardenCollection"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"buildUserCollection(String assetPath, String currentUserID, String currentUserUID)")," - builds a ",(0,a.kt)("inlineCode",{parentName:"li"},"UserCollection"),".")),(0,a.kt)("h2",{id:"testfixture-singleton"},"TestFixture singleton"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"TestFixture")," singleton is used to load the test fixture data. The singleton has the following methods:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getInstance(String assetPath)")," - returns a Future with the singleton instance. The first time it is called, it will load the test fixture data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"setup()")," - initializes the singleton by loading the test fixture data.")),(0,a.kt)("p",null,"There are two methods for each entity in the test fixture:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"get<Entity>Stream()")," - returns a Stream of the List of the entities from the test fixture."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"get<Entity>Database()")," - returns The ",(0,a.kt)("inlineCode",{parentName:"li"},"Fixture<Entity>Database")," from the test fixture.")),(0,a.kt)("h2",{id:"unit-tests"},"Unit Tests"),(0,a.kt)("p",null,"The tests are located in the ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," directory. The tests are organized by feature using the same directory structure as the feature. For example the ",(0,a.kt)("inlineCode",{parentName:"p"},"bed")," feature has the following test files"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test/features/bed/domain/bed_collection_test.dart")," tests for the ",(0,a.kt)("inlineCode",{parentName:"li"},"BedCollection")," class. Currently, just integrity checks for the test fixture and the Monarch fixture.")),(0,a.kt)("h2",{id:"running-the-unit-tests"},"Running the unit tests"),(0,a.kt)("p",null,"To run the tests, use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\u22ca> ~/G/G/ggc_app on main \u25e6 flutter test             \n00:08 +39: All tests passed!\n\u22ca> ~/G/G/ggc_app on main \u25e6\n")),(0,a.kt)("h2",{id:"integration-tests"},"Integration Tests"),(0,a.kt)("p",null,"The integration tests are located in the ",(0,a.kt)("inlineCode",{parentName:"p"},"integration_test")," directory. We override the providers to use the test fixture. The file ",(0,a.kt)("inlineCode",{parentName:"p"},"integration_test/helpers.dart")," contains n functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"initIntegrationTest()")," - initializes IntegrationTestWidgetsFlutterBinding, Firebase, and FirebaseUIAuth."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openDrawer(WidgetTester tester)")," - opens the drawer. There will be other functions to open other widgets."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gotoScreen(WidgetTester tester, String key)")," - navigates to the screen with the given key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pumpMyApp(WidgetTester tester)")," - pumps the MyApp widget with overridden providers. The providers get the data from the test fixtures.")),(0,a.kt)("p",null,"A typical integration test will look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"void main() async {\n  await initIntegrationTest();\n\n  testWidgets('Tests Vendors Drawer pages', (WidgetTester tester) async {\n    // Build our app with test data and trigger a frame.\n    await pumpMyApp(tester);\n    // If we haven't signed in yet, sign in. This isn't working yet.\n    final signIn = find.byKey(ValueKey(WidgetKeys.signInScreen.name));\n    if (signIn.evaluate().isNotEmpty) {\n      // TODO: How do we sign in?\n      return;\n    }\n    // Open the widget under test. In this case, the drawer.\n    await openDrawer(tester);\n    // Verify the we have the options we expect.\n    expect(find.text('Vendors'), findsOneWidget);\n    expect(find.byKey(ValueKey(WidgetKeys.drawerVendors.name)), findsOneWidget);\n    // Navigate to the screen under test.\n    await gotoScreen(tester, WidgetKeys.drawerVendors.name);\n    // Verify that we are on the screen under test.\n    expect(find.byIcon(Icons.expand_more), findsAtLeastNWidgets(5));\n    expect(find.text('Vendors (13)'), findsOneWidget);\n    expect(find.byKey(ValueKey(WidgetKeys.vendorDropdown.name)), findsOneWidget);\n    expect(find.byKey(ValueKey(WidgetKeys.fabAddVendor.name)), findsOneWidget);\n    expect(find.byKey(ValueKey(WidgetKeys.vendorAddSeed.name)), findsNWidgets(4));\n  });\n}\n")),(0,a.kt)("h2",{id:"running-the-integration-tests"},"Running the integration tests"),(0,a.kt)("p",null,"The easiest way to run the tests is to run them in Intellij IDEA. Select the ",(0,a.kt)("inlineCode",{parentName:"p"},"integration_test")," directory and right-click on the directory. Select ",(0,a.kt)("inlineCode",{parentName:"p"},"Run tests in integration..."),". Or you can open the test file and run the tests from the IDE."),(0,a.kt)("p",null,"You can also run them from the command line with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\u22ca> ~/G/G/ggc_app on main \u25e6 flutter test integration_test\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"The simulator must be running."),(0,a.kt)("li",{parentName:"ul"},"Since authentication is still managed using the live Firebase authentication, your simulator instances must be logged in with an account with Administrator privileges. In addition, currently, that account must be ",(0,a.kt)("a",{parentName:"li",href:"mailto:jennacorindeane@gmail.com"},"jennacorindeane@gmail.com"),"."))),(0,a.kt)("h2",{id:"helpers"},"Helpers"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"integration_test/helpers.dart")," file contains the following functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"initIntegrationTest()")," - initializes IntegrationTestWidgetsFlutterBinding, Firebase, and FirebaseUIAuth."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openDrawer(WidgetTester tester)")," - opens the drawer. There will be other functions to open other widgets."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"gotoScreen(WidgetTester tester, String key)")," - navigates to the screen with the given key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pumpMyApp(WidgetTester tester)")," - pumps the MyApp widget with overridden providers. The providers get the data from the test fixtures."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"runIntegrityCheck(WidgetTester tester)")," - runs the integrity check on the test fixture data. The drawer must be available to run this test. It does not check the number of violations.")))}h.isMDXComponent=!0}}]);