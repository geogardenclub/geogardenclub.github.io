"use strict";(self.webpackChunkgeogardenclub_github_io=self.webpackChunkgeogardenclub_github_io||[]).push([[1648],{7756:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var n=t(4848),i=t(8453);const s={hide_table_of_contents:!0},r="Backups",a={id:"develop/backups",title:"Backups",description:"Our backup approach involves both automated daily backups by Firebase as well as a manual script for off-site backup and storage.",source:"@site/docs/develop/backups.md",sourceDirName:"develop",slug:"/develop/backups",permalink:"/docs/develop/backups",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"developSidebar",previous:{title:"Screenshots",permalink:"/docs/develop/screenshots"},next:{title:"Scripts",permalink:"/docs/develop/scripts"}},c={},l=[{value:"Automated daily backups",id:"automated-daily-backups",level:2},{value:"The run_backup.sh script",id:"the-run_backupsh-script",level:2},{value:"Installation",id:"installation",level:2}];function d(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"backups",children:"Backups"})}),"\n",(0,n.jsx)(o.p,{children:"Our backup approach involves both automated daily backups by Firebase as well as a manual script for off-site backup and storage."}),"\n",(0,n.jsx)(o.h2,{id:"automated-daily-backups",children:"Automated daily backups"}),"\n",(0,n.jsxs)(o.p,{children:["We use the Cloud Firestore scheduled backup system for automated daily backups. You can find the official documentation ",(0,n.jsx)(o.a,{href:"https://firebase.google.com/docs/firestore/backups",children:"here"}),". Using this mechanism, we keep snapshots of the database for the past 8 days. Here is a screenshot of the console showing these backups:"]}),"\n",(0,n.jsx)("img",{src:"/img/develop/backup-8-days.png"}),"\n",(0,n.jsx)(o.p,{children:"This is good for disaster recovery for database (i.e. collection) related problems where we discover the problem within a week."}),"\n",(0,n.jsx)(o.p,{children:"There are some disaster scenarios that this mechanism does not cover:"}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["\n",(0,n.jsx)(o.p,{children:"If the problem involves images or other data stored in Cloud Storage, this backup will not enable recovery. (That said, Cloud Storage does support recovery of deleted images for a limited period of time.)"}),"\n"]}),"\n",(0,n.jsxs)(o.li,{children:["\n",(0,n.jsx)(o.p,{children:"If the entire GGC Google Project is somehow deleted, then we are out of luck."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(o.h2,{id:"the-run_backupsh-script",children:"The run_backup.sh script"}),"\n",(0,n.jsxs)(o.p,{children:["To provide a mechanism for downloading both the Firebase collections and the Google Cloud Storage files for off-site storage, we have the ",(0,n.jsx)(o.code,{children:"run_backup.sh"})," script. When invoked by someone with appropriate Firebase privileges (currently Philip), invoking the script results in the following:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{children:"./run_backup.sh\n09:03:38 Exporting firebase DB to cloud storage\n09:03:43 Downloading GGC cloud storage\n09:03:59 Downloading firebase index definitions\n09:04:01 Downloading Firebase collections as JSON\n09:05:27 Backup completed. See ../ggc-offsite-backups/2025-06-10_09.03.38/2025-06-10_09.03.38.backup.log for details.\n09:05:27 Next step: compress and upload ../ggc-offsite-backups/2025-06-10_09.03.38 to external storage\n"})}),"\n",(0,n.jsx)(o.p,{children:"As the script output indicates, this backup process involves the following:"}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsx)(o.li,{children:'The Firebase collections are exported (in binary format) to a "subbucket" in GGC\'s root Google Cloud Storage bucket.'}),"\n",(0,n.jsx)(o.li,{children:"The root GGC Google Cloud Storage bucket (including all its subbuckets) are downloaded to a local directory. This directory now contains both the binary format backup of the GGC collections, and all the images uploaded by users for the GGC app."}),"\n",(0,n.jsx)(o.li,{children:"The Firebase index definitions are downloaded in JSON format."}),"\n",(0,n.jsx)(o.li,{children:"The Firebase collections are downloaded in JSON format. This makes it possible to manually inspect and potentially restore individual documents if needed."}),"\n"]}),"\n",(0,n.jsx)(o.p,{children:'The script currently takes about 2 minutes to execute. When it concludes, there will be a directory named "ggc-offsite-backups" adjacent to the GGC app top-level directory. It will contain a subdirectory (named something like "2025-06-09_11.54.19") with the newly created backup. This backup subdirectory contains two JSON files (one containing the collections, and one containing the index definitions) and a directory containing a copy of the GGC Google Cloud Storage root bucket (named "ggc-app-2de7b.appspot.com"). For example:'}),"\n",(0,n.jsx)("img",{src:"/img/develop/ggc-offsite-backups.png"}),"\n",(0,n.jsx)(o.p,{children:"As you can see, the backup directory is (currently) about 100MB (uncompressed) and 85MB (compressed), both of which are too large to commit to a GitHub repository.  For the time being Philip will upload a compressed version of the directory to his personal Google Drive."}),"\n",(0,n.jsx)(o.p,{children:"Note that one result of running the script is to create a new bucket (folder) in Google Cloud Storage containing the binary backup. This folder is timestamped:"}),"\n",(0,n.jsx)("img",{src:"/img/develop/backup-cloud-storage-dir.png"}),"\n",(0,n.jsx)(o.p,{children:'There is (intentionally) no automated mechanism for deletion of these backup buckets. This means that each time you run this script, you are adding a new snapshot to this directory and the download will include any previous snapshots from prior runs. It is up to a GGC admin to periodically "garbage collect" old backups from this directory.'}),"\n",(0,n.jsx)(o.h2,{id:"installation",children:"Installation"}),"\n",(0,n.jsx)(o.p,{children:'There is no "installation" associated with the automated daily backups; this is managed through the Google Cloud Console.'}),"\n",(0,n.jsxs)(o.p,{children:["To install the third party libraries required to run the ",(0,n.jsx)(o.code,{children:"run_backups.sh"})," script, you must:"]}),"\n",(0,n.jsxs)(o.ol,{children:["\n",(0,n.jsxs)(o.li,{children:["Install gcloud.  Installation instructions are ",(0,n.jsx)(o.a,{href:"https://cloud.google.com/sdk/docs/downloads-interactive",children:"here"})]}),"\n",(0,n.jsxs)(o.li,{children:["Configure gcloud by running ",(0,n.jsx)(o.code,{children:"gcloud init"}),"."]}),"\n",(0,n.jsxs)(o.li,{children:["Install ",(0,n.jsx)(o.a,{href:"https://www.npmjs.com/package/@endran/firestore-export-import",children:"@endran/firestore-export-import"})," by running ",(0,n.jsx)(o.code,{children:"npm install @endran/firestore-export-import --save"}),"."]}),"\n",(0,n.jsxs)(o.li,{children:["Create a local json file with service account information, as documented in the ",(0,n.jsx)(o.a,{href:"https://gitlab.com/endran/firestore-export-import#notes",children:"Firestore-Export-Import Notes"}),". ",(0,n.jsx)(o.strong,{children:'Please name this file "ggc-app-service-account.json" so that it is git-ignored.'})," This service account information must ",(0,n.jsx)(o.strong,{children:"not"})," be uploaded to GitHub."]}),"\n"]})]})}function h(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>r,x:()=>a});var n=t(6540);const i={},s=n.createContext(i);function r(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);