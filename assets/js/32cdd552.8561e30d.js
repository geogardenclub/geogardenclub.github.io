"use strict";(self.webpackChunkgeogardenclub_github_io=self.webpackChunkgeogardenclub_github_io||[]).push([[6900],{8608:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var n=a(5893),i=a(1151);const o={hide_table_of_contents:!0},s="Managing Firebase data",r={id:"develop/managing-firebase-data",title:"Managing Firebase data",description:"We use a Firebase database to store the data associated with GGC.  There are several important issues associated with managing Firebase data.",source:"@site/docs/develop/managing-firebase-data.md",sourceDirName:"develop",slug:"/develop/managing-firebase-data",permalink:"/docs/develop/managing-firebase-data",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"developSidebar",previous:{title:"Architecture",permalink:"/docs/develop/architecture"},next:{title:"Deployment",permalink:"/docs/develop/deployment"}},d={},c=[{value:"Updating Firebase: via the Console",id:"updating-firebase-via-the-console",level:2},{value:"Updating Firebase: via Database Operation",id:"updating-firebase-via-database-operation",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"managing-firebase-data",children:"Managing Firebase data"})}),"\n",(0,n.jsx)(t.p,{children:"We use a Firebase database to store the data associated with GGC.  There are several important issues associated with managing Firebase data."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:'Is the database in a "consistent" state?'}),"\n",(0,n.jsx)(t.li,{children:"If the database is inconsistent, how do we update the database to get it to a consistent state?"}),"\n",(0,n.jsx)(t.li,{children:"Does the current database representation satisfy the needs of the customer?"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The first question can be answered through the use of the ",(0,n.jsx)(t.a,{href:"/docs/develop/integrity-check",children:"Database Integrity Check"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"There are basically two approaches to answering the second question: either via the Firebase console or by using our Database Operation feature."}),"\n",(0,n.jsx)(t.h2,{id:"updating-firebase-via-the-console",children:"Updating Firebase: via the Console"}),"\n",(0,n.jsx)(t.p,{children:"If the inconsistency is minor and affects only a few documents, then a reasonable approach is to use the Firebase console:"}),"\n",(0,n.jsx)("img",{src:"/img/develop/firestore/firebase-console.png"}),"\n",(0,n.jsx)(t.p,{children:"The Firebase console enables you to edit, create, or delete any document, as well as search for documents satisfying a criteria."}),"\n",(0,n.jsx)(t.h2,{id:"updating-firebase-via-database-operation",children:"Updating Firebase: via Database Operation"}),"\n",(0,n.jsx)(t.p,{children:'Sometimes the inconsistency is not minor, and requires manipulation of dozens or hundreds of documents. This would be super painful to fix using the console.  For these situations, we\'ve developed an Admin command called "Database Operation". It allows you to programmatically inspect all documents in the database, decide what to create, modify, or delete, and then invoke the appropriate mutation.'}),"\n",(0,n.jsx)(t.p,{children:"To implement a programmatic update using Database Operation, you must first implement a subclass of DatabaseOperation. For example, here is a subclass that iterates through all observations and finds some that need to be updated:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"class DatabaseOperation19 extends DatabaseOperation {\n  DatabaseOperation19(\n      {required super.chapters,\n      required super.gardens,\n      required super.users,\n      super.description =\n          'Fix all observations to refer to the \"Unknown\" variety, not the empty string'});\n\n  @override\n  void setup() {\n    List<Observation> observationsToSet = [];\n    for (Observation observation in chapters.observations.observations) {\n      if (!chapters.varieties.isVarietyID(observation.cachedVarietyID)) {\n        String cropID = observation.cachedCropID;\n        Variety unknownVariety =\n            chapters.crops.getUnknownVariety(chapters, cropID);\n        logger.d('Setting varietyID for  ${observation} to $unknownVariety');\n        Observation updatedObservation = observation.copyWith(\n          cachedVarietyName: unknownVariety.name,\n          cachedVarietyID: unknownVariety.varietyID,\n        );\n        observationsToSet.add(updatedObservation);\n      }\n    }\n\n    data.observationsToSet = observationsToSet;\n  }\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"When the simulator is run with this operation specified as the one to invoke in the DatabaseOperationScreen widget, then navigating to the Database Operation screen in the Admin panel might look like this:"}),"\n",(0,n.jsx)("img",{width:"500px",src:"/img/develop/firestore/db-operation.png"}),"\n",(0,n.jsx)(t.p,{children:"What's cool about the implementation of Database Operation is that when you navigate to the screen, it will tell you what it's going to do if you hit the \"Invoke Operation\" button. In this example, it will update 145 Observation documents."}),"\n",(0,n.jsx)(t.p,{children:'To do this, the setup() method is called when you visit the page, and its task is to figure out all the documents that need to be updated and then update the appropriate field in the "data" instance. This enables the page to provide feedback on how many entities of what type are going to be changed if you actually invoke the operation. (You can also use logger statements to get additional info on what the operation will do.)'})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>r,a:()=>s});var n=a(7294);const i={},o=n.createContext(i);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);